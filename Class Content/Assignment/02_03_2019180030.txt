1. 본인의 이름을 쓰는 프로그램 작성 (이미지는 캡처하여 본문에 게시)
	3번 과제(함수)를 얼마나 적용하였는지 작성
	제 이름에는 ㅇ과 직선 획(ㅣ, ㅑ, ㅢ)만 들어갑니다.
	그래서 draw_circle 이라는 원을 그리는 함수와,
	draw_ee 라는 ㅣ를 그리는 함수,
	어느 방향으로든 직선을 그리는 함수를 만들었습니다.

	기본적으로 함수에서 그림을 그릴 시작 좌표를 인자로 받도록 했습니다. 그리고 ee, line 함수는 선의 길이도 인자로 받았습니다.
	그려지는 원의 크기는 다 동일하게 설정하였고,
	draw_ee에서 그냥 직선으로 쭉 그려지는 것이 아니라 한번 꺾여 그려지는데 그 꺾이는 정도도 동일하게 설정하였습니다.
	모든 획은 함수를 사용하여 그리도록 코드를 작성하였습니다.

2. 0,0 ~ 500, 500 크기 100의 격자를 그리는 프로그램 작성 (for, while 등의 반복문을 사용할 것)

3. 파이썬 기초(3)의 함수 부분을 읽고 내용 정리
	수학에서의 함수는 어떤 수식을 정의한 것이지만, 프로그래밍에서의 함수란 어떤 특정한 일을 처리하는 기능을 모아놓은 것을 말합니다.
	수학적인 함수도 당연히 구현할 수 있습니다. 함수는 여러 작업을 모아 하나로 처리할 수 있게 해줍니다.
	일반적으로 라이브러리와 모듈은 여러 개의 함수들로 구성되어있습니다.
	프로그래머는 자신만의 함수를 만들 수 있으며, 함수의 이름은 함수의 기능을 나타내는 것이 좋습니다.
	함수를 정의하려면,
	def 함수명 (매개변수):
		<수행할 문장>
	형식으로 작성하면 됩니다. def 함수명 (매개변수): 를 입력하면 그 다음 줄부터 자동으로 들여쓰기가 됩니다.
	들여쓰기 된 모든 줄이 함수에 포함된다고 처리되므로 함수에 포함할 문장들은 모두 들여쓰기하는 것을 잊지 않도록 합니다.
	함수를 정의한 것만으로는 아무 일이 일어나지 않습니다. 정의한 함수를 사용하려면 함수를 호출해야합니다.
	반대로, 함수를 호출하려면 함수를 정의해주어야 합니다.
	여러 개의 값을 return 할 수 있고, 인자의 타입에 따라 자동으로 연산이 결정됩니다.
	만약에 들어온 인자들을 더해주는 함수였다면, 인자가 숫자 값이었을 때는 수학적 연산을 하고
	문자열이었을 때는 두 문자열을 이어주는 연산을 합니다.

4. recursive call(재귀함수 호출)에 대해 조사하고 정리 (일반적인 개념, python에서 활용 예)
	재귀 호출이란 함수 내부에서 함수가 자기 자신을 또다시 호출하는 행위를 말합니다.
	재귀 호출은 자기 자신을 계속해서 호출하기 때문에, 호출이 중단될 중단점을 반드시 설정해주어야 합니다.
	그렇게 하지 않으면 무한 재귀함수가 될 가능성이 있습니다.
	재귀 함수는 수학적 귀납법 표현식으로 표현할 수 있습니다.
	ex) 	P(N)
		{
		    P(N-1);
		}
	
	이처럼 간결하게 표현할 수 있어, 함수 기능의 가독성이 높아집니다.
	하지만 자기 자신을 특정 조건을 달성하기 전까지 계속 호출하므로, 많은 함수 호출로 인한 성능 저하가 발생합니다.
	그러므로 비재귀 함수보다 실행 시간이 오래 걸리는 단점이 있습니다.

	python에서 활용 예
	팩토리얼 값을 구하는 함수를 만들어 보았습니다. 아래는 함수를 정의한 것과 그 함수를 호출하여 출력된 값입니다.
	>>> def factorial(n):
		if (n == 1):
			return 1
		return n * factorial(n - 1)

	>>> print(factorial(4))
	24

5. fractal graphic에 대해 조사하고 정리, turtle graphics의 관계에 대해 조사 (그림 활용O)
	기하학적 프랙탈이란 서로 다른 배율로 반복되는 구조를 가진 기하학적 모양을 말합니다.
	Benoit Mandelbrot에 의해 정의된 바에 따르면 "부분으로 분할될 수 있는 거칠거나 조각난 기하학적 모양, 
	각 부분은 (적어도 대략) 전체의 축소된 크기 사본" 이라고 할 수 있습니다. 
	프랙탈 이미지는 확대하거나, 축소하거나 항상 동일한 패턴을 보입니다. 다시 말하면, 일부 작은 조각이 전체와 비슷한 기하학적 형태를
	나타낸다는 것입니다. 이런 특징을 자기 유사성이라고 합니다. 
	프랙탈 도형은 종종 컴퓨터 소프트웨어를 이용한 재귀적이거나 반복적인 작업에 의한 반복되는 패턴으로 만들어집니다.
	대표적인 프랙탈 도형에는 망델브로 집합, 칸토어 집합, 시에프린스키 삼각형, 페아노 곡선, 코흐 곡선 등이 있습니다

	프랙탈을 만들려면, 점점 커지거나 작아지는 구조를 반복한다는 점을 보았을 때 재귀 함수를 이용해야한다는 것을 알 수 있습니다.
	프랙탈을 그리는 코드를 turtle graphics로 시각화할 수 있습니다.

	python의 turtle과 재귀함수를 이용하여 프랙탈 트리를 그릴 수 있습니다.

	import turtle

	MINIMUM_BRANCH_LENGTH = 5

	def build_tree(t, branch_length, shorten_by, angle):
  		if branch_length > MINIMUM_BRANCH_LENGTH:
    			t.forward(branch_length)
    			new_length = branch_length - shorten_by

   			 t.left(angle)
    			build_tree(t, new_length, shorten_by, angle)

    			t.right(angle * 2)
   			build_tree(t, new_length, shorten_by, angle)

    			t.left(angle)
    			t.backward(branch_length)

	tree = turtle.Turtle()
	tree.hideturtle()
	tree.setheading(90)
	tree.color('green')

	build_tree(tree, 50, 5, 30)
	turtle.mainloop()
	
	위 코드를 작성함으로써 아래 이미지와 같은 프랙탈 트리를 얻을 수 있습니다.
	
	turtle graphic을 이용하여 코흐 곡선도 그릴 수 있습니다.
	코흐 곡선은 정삼각형을 그린 후, 각 변을 3등분 하여 한 변의 길이가 이 3등분의 길이와 같은 정삼각형을 계속해서 붙여나가 만들어진 모양입니다.
	마치 눈송이처럼 생겨 코흐 눈송이라고도 합니다.
	
	import turtle

	def koch_curve(t, iterations, length, shortening_factor, angle):
  		if iterations == 0:
   			 t.forward(length)
 		 else:
   			iterations = iterations - 1
   			length = length / shortening_factor
    			koch_curve(t, iterations, length, shortening_factor, angle)
    			t.left(angle)
    			koch_curve(t, iterations, length, shortening_factor, angle)
    			t.right(angle * 2)
    			koch_curve(t, iterations, length, shortening_factor, angle)
    			t.left(angle)
    			koch_curve(t, iterations, length, shortening_factor, angle)
	t = turtle.Turtle()
	t.hideturtle()

	for i in range(3):
  		koch_curve(t, 4, 200, 3, 60)
  		t.right(120)

	turtle.mainloop()
	
	위 코드를 작성함으로써 아래 이미지의 코흐 눈송이 그림을 그릴 수 있습니다.
	코드 출처 : https://towardsdatascience.com/creating-fractals-with-python-d2b663786da6