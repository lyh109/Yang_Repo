1. 자기소개
- 1.1 학번과 이름
2019180030 이양희

- 1.2 컴퓨터는 잘 다루는지(0~10)
4 정도인 것 같습니다. 필요한 프로그램을 찾아 적절하게 사용할 수 있고,
프로그램 실행 중 어떠한 문제가 생겼을 때 인터넷 서칭을 통해 웬만해서는 해결할 수 있습니다.
하지만 하드웨어, 성능 관련 부분은 자세하게 잘 모르기 때문에 4라고 생각했습니다.

- 1.3 프로그래밍 경험은 어떤 것이 있는지? 어떤 언어, 개발툴, 플랫폼을 해봤는지
언어는 작년 C, C++ 과목을 수강하여 언어는 C, C++을 사용해보았습니다. 개발툴은 비주얼 스튜디오를 사용했습니다.
플랫폼이 무엇인지 잘 몰라 찾아보니, 응용 소프트웨어를 실행하기 위해 쓰이는 하드웨어와 소프트웨어의 결합임을 알 수 있었습니다.
저는 마이크로소프트 윈도우를 사용했습니다.
1학기 때 윈도우 프로그래밍 과목에서 텀 프로젝트로 슈팅 게임을 만들어보았습니다.

- 1.4 이 수업에서 바라는 점
나중에 개인으로 2D 게임을 만드는 프로젝트를 하게 될 텐데, 아직 문법적으로나 논리적으로나 지식이 부족하여
수업을 들으며 부족한 부분을 채워나가고 싶습니다. 파이썬은 거의 다뤄보지 않아서 걱정이 되는데
더 알아두면 좋을 내용 등을 따로 찾아볼 수 있게 언급해주시면 좋을 것 같습니다.

2. OOP 관련 슬라이드 내용 및 느낀 점 정리
객체지향이 객체를 위주로 한다는 뜻임을 비유를 통해 쉽게 이해할 수 있었습니다.
클래스는 표현할 대상을 서술하고, 오브젝트는 그 클래스를 실체화한 것입니다.
이렇게 클래스를 사용함으로써 여러가지 데이터를 묶어 하나로 표현할 수 있습니다.
또한 어떠한 클래스를 다른 클래스가 물려받아 물려받은 클래스의 특징도 가지고 있으면서, 자신만의 특징 또한 갖는 성질을 보일 수도 있습니다.
그리고 같은 명령이지만 각 오브젝트에 따라 다르게 수행할 수 있는 성질도 가집니다.
객체지향 외에 다른 프로그래밍 패러다임에는 어떤 것이 있는지도 대략 알 수 있었습니다.
프로그래밍 패러다임 중 대표적인 것은 구조적 프로그래밍, 객체지향 프로그래밍입니다.
Smalltalk는 누구나 쉽게 프로그래밍을 할 수 있는 환경을 만들고자 하는 목표를 가지고 있으며, 현대 대부분 객체지향 언어의 조상입니다.
객체지향의 장점에는 자연스런 모델링, 생산성 향상 등이 있습니다. 
그리고 어디에 어떻게 쓰느냐에 따라 객체지향 언어를 사용하지만, 객체지향 프로그래밍을 하지 않을 수도 있고,
기존의 방법보다 좋지 않을 수도 있습니다. 객체지향은 데이터를 감추고 행위만 보이게 합니다.  객체 간에 메시지를 주고 받아 실행하는 메시지 기반 방식입니다.
그렇게 함으로써 모듈화가 자연스레 달성되고, 재사용성 또한 갖추게 됩니다.
1학년 때 객체지향이 무엇이냐에 대해 배웠는데 시간이 지나 조금씩 잊어버렸던 것을 다시 상기할 수 있었습니다.
그리고 프로그래밍 패러다임에 어떤 것이 있는지 잘 몰랐었는데 다양한 패러다임의 종류도 알아볼 수 있었습니다.
이전까지는 객체에 대해 깊이 생각해보지 않았고, 지금 어떤 방식으로 프로그래밍을 하고 있는 것인지도 신경쓰지 않았습니다.
앞으로는 코딩할 때 모듈화와 재사용성을 갖추어 코드를 작성하는 능률을 높이는 객체지향 방식을 어떻게 적용할 것인지 생각하며 코딩을 해야할 것 같습니다.
 
3. (사이트 주소)
- 3.1 위 사이트의 설명을 따라하고 간단히 요약
저는 윈도우를 사용하기 때문에 윈도우 방식을 위주로 보았습니다.
커맨드 라인을 열기 위해 시작메뉴로 가서 모든 프로그램 -> 보조 프로그램 -> 명령 프롬프트를 실행합니다.
시작 버튼 옆 검색할 수 있는 창이 있는데 그곳에서 바로 명령 프롬프트를 입력해도 됩니다.
whoami 명령어를 통해 컴퓨터 사용자의 이름을 볼 수 있습니다.
기본 명령어에는 현재 디렉터리를 확인하는 방법, 디렉터리에 어떤 것이 있는지 보는 방법, 현재 디렉터리를 변경하는 방법, 
새 디렉터리를 생성하고 삭제하는 방법, 커맨드 라인 종료 방법이 있습니다.
현재 디렉터리를 확인하려면 cd를 입력합니다. 그리고 해당 디렉터리 내의 파일과 디렉터리 목록을 보려면 dir 을 입력합니다.
현재 디렉터리를 변경하고 싶을 때는 cd (디렉터리 이름)으로 변경할 수 있습니다.
mkdir 명령어로 현재 디렉터리에 새로운 디렉터리를 만들 수 있습니다.
연습문제로 새로 만든 practice 디렉터리에 test 디렉터리를 만들어 보고자 합니다.
현재 디렉터리가 바탕화면이므로, cd practice를 입려하며 practice 디렉터리를 현재 디렉터리로 변경하고,
mkdir test로 test 디렉터리를 만들면 됩니다.
상위 디렉터리로 돌아가려면 cd .. 을 입력합니다.
윈도우에서 아까 만든 practice 디렉터리를 삭제하기 위해서는
rmdir /S practice 를 입력합니다. 그러면 진짜 삭제할 것인지 확인하는 문구가 나옵니다. Y를 입력하면 디렉터리가 삭제됩니다.
이제 커맨드 라인을 종료하려면 exit를 입력합니다.
이외에 파일을 복사하는 copy, 파일을 이동하는 move 명령어도 있다는 것도 알 수 있었습니다.

- 3.2 Command Line 방식의 숙련도에 대한 평가(0~10)
2점 정도를 줄 수 있을 것 같습니다. 이제 알게된 기본 명령어를 제외하고는 알고 있거나 기억나는 다른 명령어가 없고, 더 다양하게 사용하지 못하기 때문입니다.
하지만 기본 명령어에 대해서는 잘 이해했고, 매우 간단한 문제이기는 했지만 중간의 연습문제를 쉽게 해결할 수 있었기 때문에 2점을 줄 수 있다고 생각합니다.