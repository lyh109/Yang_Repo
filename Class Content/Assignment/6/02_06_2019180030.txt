1. helper.py 라인별 분석
	math 모듈의 함수를 사용하기 위해 math 모듈을 import로 가져옵니다.
	move_toward 함수를 선언하고, 정의합니다.
	move_toward 함수는 오브젝트의 위치, 델타 값, 목적지 위치를 변수로 받아옵니다.
	함수의 지역 변수로 x, y를 선언하고 각 축 기준 오브젝트의 위치와 델타 값을 넣어줍니다.
	x, y가 목적지 위치와 같아지면 done 변수를 True로 변경합니다.
	그리고, done이 True라면 pos에 target을 대입합니다. done이 False라면 pos는 x, y 값입니다.
	오브젝트의 위치와 목적지 도착 여부를 반환합니다.
	
	delta 함수를 선언하고, 정의합니다.
	delta 함수는 오브젝트의 위치, 목적지 위치, 속도를 변수로 받아옵니다.
	함수의 지역 변수로 dx, dy 변수를 선언하고 각 축 기준 목적지 위치에서 현재 오브젝트의 위치를 빼기 연산하여 저장합니다.
	distance 변수는 원점(0, 0)으로부터 (dx, dy)까지의 거리를 저장합니다.
	만약 distance가 0이라면 함수는 0, 0을 반환합니다.
	if문에 걸리지 않았을 경우, 각 델타 값에 속도를 곱하고, 거리를 나눈 값을 반환합니다.
	
	move_toward_obj 함수는 move_toward 함수와 다르게 obj 하나만 변수로 받습니다.
	obj 변수는 어떠한 오브젝트 클래스의 객체일 것입니다. 그래서 함수를 사용할 때 변수를 오브젝트 하나만 입력하면 됩니다.
	만약 오브젝트의 목적지가 None이라면, 함수를 종료합니다.
	함수 내에서 pos, done 변수를 만들고 move_toward 함수를 호출합니다.
	만약 done이 True라면, 오브젝트의 목적지를 None으로 만들고, 델타 값을 0, 0으로 만듭니다.
	오브젝트의 위치에 함수 내 지역 변수인 pos를 대입합니다.
	
	set_target 함수를 선언하고, 정의합니다.
	set_target 함수는 오브젝트와 목적지 위치를 받아옵니다.
	오브젝트의 멤버변수 target에 목적지 위치를 저장합니다.
	만약 target이 None이라면 오브젝트의 멤버변수 delta에 0, 0을 저장하고,
	None이 아니라면 delta 함수를 호출합니다.

3-1
	click 변수를 추가하여 handle_events 함수에서 마우스를 몇 번 클릭했는지 카운트 하고, 처음 클릭했을 때 속도가 1이어야 하므로
	기본 속도를 1로 설정하고, 마우스 클릭이 1번 이상일 때부터 클릭할 때마다 속도를 1씩 증가하였습니다.
	목적지에 도착하면 스피드를 1로, 클릭 횟수를 0으로 초기화하여 다시 속도가 기본 속도가 되도록 했습니다.

3-2
	마우스 클릭을 하면 속도가 빨라지면서, 해당 지점을 목적지로 삼기 때문에 일부러 리스트에 있는 마지막 목적지에 도달할 때까지
	속도를 초기화하지 않았습니다. 만약에 (100, 100), (200, 200), (300, 300) 지점이 리스트에 추가되어 있다면
	3번 클릭했으므로 속도는 3이 되었을 것이고, (300, 300)에 도착하고 나면 속도와 클릭 횟수가 초기화되고 멈춥니다.
	이후에 다른 지점을 클릭하게 되면 기본 속도로 그 지점을 향해 움직입니다

3-2를 구현하면서 임의로 속도 값을 조정한 것을 제외하고는 요구 사항을 모두 만족할 수 있게 수정하였습니다.